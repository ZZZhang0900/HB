library(glmnet)
###### 分别存储 自变量和因变量
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
x <- as.matrix(data[,1:21])
y <- data[,22]
#采用glmnet() 建模
alpha1_fit <- glmnet(x,y,alpha=1,family="gaussian")
plot(alpha1_fit,xvar="lambda",label=TRUE)
#交叉验证
alpha1.fit <- cv.glmnet(x,y,type.measure = "mse",alpha=1,family="gaussian")
plot(alpha1.fit)
print(alpha1.fit)
coef(alpha1_fit,s=alpha1.fit$lambda.1se)
crPlots(tlm)
qqPlot(tlm)
vif(tlm)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
#######################################前向
# 设立随机数种子
#set.seed(123)
#设置重复的k倍交叉验证
train.control <- trainControl(method = "cv", number = 10)
# 训练模型,nvmax，该参数对应于要纳入模型的最大预测变量数
#"leapBackward"，以使线性回归与向后选择相适应
#"leapForward"，以使线性回归与正向选择相适应
#"leapSeq"，以逐步选择拟合线性回归
step.Forward <- train(dailyNum ~., data = data,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:8),
trControl = train.control
)
step.Forward$results
step.Forward
#该函数summary()报告每种模型大小的最佳变量集，直到最佳的4变量模型。
summary(step.Forward$finalModel)
#最终模型的回归系数（id = 4）可以按以下方式访问：
coef(step.Forward$finalModel, 3)
#######################################后向
step.Backward <- train(dailyNum ~., data = data,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.Backward$results
step.Backward
summary(step.Backward$finalModel)
coef(step.Backward$finalModel, 4)
#######################################双向
step.leapSeq <- train(dailyNum ~., data = data,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.leapSeq$results
library(leaps)
library(MASS)
library(caret)
library(car)
library(TSA)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
#######################################前向
# 设立随机数种子
#set.seed(123)
#设置重复的k倍交叉验证
train.control <- trainControl(method = "cv", number = 10)
# 训练模型,nvmax，该参数对应于要纳入模型的最大预测变量数
#"leapBackward"，以使线性回归与向后选择相适应
#"leapForward"，以使线性回归与正向选择相适应
#"leapSeq"，以逐步选择拟合线性回归
step.Forward <- train(dailyNum ~., data = data,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:8),
trControl = train.control
)
step.Forward$results
step.Forward
#该函数summary()报告每种模型大小的最佳变量集，直到最佳的4变量模型。
summary(step.Forward$finalModel)
#最终模型的回归系数（id = 4）可以按以下方式访问：
coef(step.Forward$finalModel, 3)
#######################################后向
step.Backward <- train(dailyNum ~., data = data,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.Backward$results
step.Backward
summary(step.Backward$finalModel)
coef(step.Backward$finalModel, 4)
#######################################双向
step.leapSeq <- train(dailyNum ~., data = data,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.leapSeq$results
step.leapSeq
summary(step.leapSeq$finalModel)
coef(step.leapSeq$finalModel,3)
#######################################残差分析
#算出模型的标准化残差
y.rst=rstandard(step.Backward$finalModel)
y.rst
lm.salary=lm(log(dailyNum)~ XJ +preci3+rh1,data=data)
lm.step=step(lm.salary,direction="both")
y.rst=rstandard(lm.step)
y.fit=predict(lm.step)
plot(y.rst~y.fit)
#绘制模型诊断图
tlm<-lm(dailyNum ~  XJ +preci3+rh1,data=data)
par(mfrow=c(2,2))
plot(lm.step)
influence.measures(lm.step)
crPlots(tlm)
qqPlot(tlm)
crPlots(tlm)
crPlots(tlm)
plot(lm.step)
influence.measures(lm.step)
crPlots(tlm)
qqPlot(tlm)
vif(tlm)
qqPlot(tlm)
tlm<-lm(dailyNum ~  XJ,data=data)
qqPlot(tlm)
tlm2<-lm(dailyNum ~  XJ,data=data)
qqPlot(tlm2)
tlm2<-lm(dailyNum ~  XJ,data=data)
qqPlot(tlm2)
crPlots(tlm)
tlm2<-lm(dailyNum ~  XJ,data=data)
qqPlot(tlm2)
tlm2<-lm(dailyNum ~  XJ,data=data)
qqline(tlm2)
qqline(tlm2)
tlm2<-lm(dailyNum ~  XJ,data=data)
qqPlot(tlm2)
install.packages('ggridges')
install.packages('readxl')
library(ggplot2)
library(ggridges)
library(readxl)
#theme_set(theme_ridges())
library(RColorBrewer)
Colormap<- colorRampPalette(rev(brewer.pal(11,'Spectral')))(32)
data <-read_excel("neimeng.xlsx",sheet = 6)
N <-ncol(data)-1
ggplot(data, aes(x = 'cases',y = 'month')) +
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3 ) +
scale_fill_gradientn(colours=Colormap,name = "Temp. [F]")
w <- c("12月","11月","10月","9月","8月","7月","6月","5月","4月","3月","2月","1月")
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")
theme_classic()
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA))
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())
+ theme(panel.border = element_rect(fill=NA,color="black", size=5, linetype="solid"))
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(panel.border = element_rect(fill=NA,color="black", size=5, linetype="solid"))
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(panel.border = element_rect(fill=NA,color="black", size=3, linetype="solid"))
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(panel.border = element_rect(fill=NA,color="black", size=1.5, linetype="solid"))
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"))
data <-read_excel("neimeng.xlsx",sheet = 6)
N <-ncol(data)-1
ggplot(data, aes(x = 'cases',y = 'month')) +
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3 ) +
scale_fill_gradientn(colours=Colormap,name = "Temp. [F]")
w <- c("12月","11月","10月","9月","8月","7月","6月","5月","4月","3月","2月","1月")
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "病例数")+
xlab("人间布病月病例数") +
ylab("月份")+
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"))
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "Incidence")+
xlab("Monthly incidence of human brucellosis") +
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())
install.packages('ggridges')
install.packages('readxl')
library(ggplot2)
library(ggridges)
library(readxl)
#theme_set(theme_ridges())
library(RColorBrewer)
Colormap<- colorRampPalette(rev(brewer.pal(11,'Spectral')))(32)
data <-read_excel("neimeng.xlsx",sheet = 1)
N <-ncol(data)-1
ggplot(data, aes(x = 'cases',y = 'month')) +
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3 ) +
scale_fill_gradientn(colours=Colormap,name = "Temp. [F]")
w <- c("Dev","Nov","oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan")
ggplot(data, aes(x =cases,y = month,  fill = month)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = expansion(mult = c(0.01, 0.25)),labels = w)+
geom_density_ridges_gradient(aes(fill = ..x..), scale = 2, size = 0.3) +
#theme_minimal()+theme(legend.position = "none") +
scale_fill_gradientn(colours=Colormap,name = "Incidence")+
xlab("Monthly incidence of human brucellosis") +
theme_classic()+
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())
install.packages('leaps')
library(leaps)
library(MASS)
library(caret)
install.packages("car")
library(car)
library(TSA)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
#######################################鍓嶅悜
# 璁剧珛闅忔満鏁扮瀛?
#set.seed(123)
#璁剧疆閲嶅鐨刱鍊嶄氦鍙夐獙璇?
train.control <- trainControl(method = "cv", number = 10)
# 璁粌妯″瀷,nvmax锛岃鍙傛暟瀵瑰簲浜庤绾冲叆妯″瀷鐨勬渶澶ч娴嬪彉閲忔暟
#"leapBackward"锛屼互浣跨嚎鎬у洖褰掍笌鍚戝悗閫夋嫨鐩搁€傚簲
#"leapForward"锛屼互浣跨嚎鎬у洖褰掍笌姝ｅ悜閫夋嫨鐩搁€傚簲
#"leapSeq"锛屼互閫愭閫夋嫨鎷熷悎绾挎€у洖褰?
step.Forward <- train(dailyNum ~., data = data,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:8),
trControl = train.control
)
step.Forward$results
step.Forward
#璇ュ嚱鏁皊ummary()鎶ュ憡姣忕妯″瀷澶у皬鐨勬渶浣冲彉閲忛泦锛岀洿鍒版渶浣崇殑4鍙橀噺妯″瀷銆?
summary(step.Forward$finalModel)
#鏈€缁堟ā鍨嬬殑鍥炲綊绯绘暟锛坕d = 4锛夊彲浠ユ寜浠ヤ笅鏂瑰紡璁块棶锛?
coef(step.Forward$finalModel, 3)
#######################################鍚庡悜
step.Backward <- train(dailyNum ~., data = data,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.Backward$results
step.Backward
summary(step.Backward$finalModel)
coef(step.Backward$finalModel, 4)
#######################################鍙屽悜
step.leapSeq <- train(dailyNum ~., data = data,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.leapSeq$results
step.leapSeq
summary(step.leapSeq$finalModel)
coef(step.leapSeq$finalModel,3)
#######################################娈嬪樊鍒嗘瀽
#绠楀嚭妯″瀷鐨勬爣鍑嗗寲娈嬪樊
y.rst=rstandard(step.Backward$finalModel)
y.rst
lm.salary=lm(log(dailyNum)~ XJ +preci3+rh1,data=data)
lm.step=step(lm.salary,direction="both")
y.rst=rstandard(lm.step)
y.fit=predict(lm.step)
plot(y.rst~y.fit)
#缁樺埗妯″瀷璇婃柇鍥?
tlm<-lm(dailyNum ~  XJ +preci3+rh1,data=data)
par(mfrow=c(2,2))
plot(lm.step)
influence.measures(lm.step)
install.packages("car")
crPlots(tlm)
tlm2<-lm(dailyNum ~  XJ,data=data)
install.packages("car")
install.packages("car")
par(mfrow=c(2,2))
plot(lm.step)
influence.measures(lm.step)
crPlots(tlm)
tlm2<-lm(dailyNum ~  XJ,data=data)
qqPlot(tlm2)
vif(tlm)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
#######################################鍓嶅悜
# 璁剧珛闅忔満鏁扮瀛?
#set.seed(123)
#璁剧疆閲嶅鐨刱鍊嶄氦鍙夐獙璇?
train.control <- trainControl(method = "cv", number = 10)
# 璁粌妯″瀷,nvmax锛岃鍙傛暟瀵瑰簲浜庤绾冲叆妯″瀷鐨勬渶澶ч娴嬪彉閲忔暟
#"leapBackward"锛屼互浣跨嚎鎬у洖褰掍笌鍚戝悗閫夋嫨鐩搁€傚簲
#"leapForward"锛屼互浣跨嚎鎬у洖褰掍笌姝ｅ悜閫夋嫨鐩搁€傚簲
#"leapSeq"锛屼互閫愭閫夋嫨鎷熷悎绾挎€у洖褰?
step.Forward <- train(dailyNum ~., data = data,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:8),
trControl = train.control
)
step.Forward$results
step.Forward
#璇ュ嚱鏁皊ummary()鎶ュ憡姣忕妯″瀷澶у皬鐨勬渶浣冲彉閲忛泦锛岀洿鍒版渶浣崇殑4鍙橀噺妯″瀷銆?
summary(step.Forward$finalModel)
#鏈€缁堟ā鍨嬬殑鍥炲綊绯绘暟锛坕d = 4锛夊彲浠ユ寜浠ヤ笅鏂瑰紡璁块棶锛?
coef(step.Forward$finalModel, 3)
#######################################鍚庡悜
step.Backward <- train(dailyNum ~., data = data,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
step.Backward$results
step.Backward
summary(step.Backward$finalModel)
coef(step.Backward$finalModel, 4)
#######################################鍙屽悜
step.leapSeq <- train(dailyNum ~., data = data,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:7),
trControl = train.control
)
library(leaps)
library(MASS)
library(caret)
install.packages("car")
library(car)
library(TSA)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
#######################################鍓嶅悜
# 璁剧珛闅忔満鏁扮瀛?
#set.seed(123)
#璁剧疆閲嶅鐨刱鍊嶄氦鍙夐獙璇?
train.control <- trainControl(method = "cv", number = 10)
# 璁粌妯″瀷,nvmax锛岃鍙傛暟瀵瑰簲浜庤绾冲叆妯″瀷鐨勬渶澶ч娴嬪彉閲忔暟
#"leapBackward"锛屼互浣跨嚎鎬у洖褰掍笌鍚戝悗閫夋嫨鐩搁€傚簲
#"leapForward"锛屼互浣跨嚎鎬у洖褰掍笌姝ｅ悜閫夋嫨鐩搁€傚簲
#"leapSeq"锛屼互閫愭閫夋嫨鎷熷悎绾挎€у洖褰?
step.Forward <- train(dailyNum ~., data = data,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:8),
trControl = train.control
)
step.Forward$results
#鏁ｇ偣鍥剧煩闃?
library(GGally);library(ggplot2)
library(PerformanceAnalytics)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
chart.Correlation(data,histogram = TRUE,pch=19)
#鏁ｇ偣鍥剧煩闃?
library(GGally);library(ggplot2)
library(PerformanceAnalytics)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
chart.Correlation(data,histogram = TRUE,pch=19)
library(MASS)
install.packages("car")
library(car)
data <- read.csv("monthly_total_mean_zhihou222555.csv",nrows=60)
tlm<-lm(dailyNum ~ temp + preci + rh + ws + sp + temp1 + preci1 + rh1 +
ws1 + sp1 + temp2 + preci2 + rh2 + ws2 + sp2 + temp3 + preci3 +
rh3 + ws3 + sp3 + XJ,data=data)
tlmfor<-step(tlm,direction="forward")
install.packages("car")
summary(tlmfor)
tlmboth=step(tlm,direction="both")
summary(tlmboth)
tlmback=step(tlm,direction="backward")
install.packages("car")
summary(tlmback)
anova(tlmback, tlmfor)
AIC(tlmback, tlmfor)
#绠楀嚭妯″瀷鐨勬爣鍑嗗寲娈嬪樊
library(TSA)
y.rst=rstandard(lm.step)
y.rst
lm.salary=lm(log(dailyNum)~ XJ,data=data)
lm.step=step(lm.salary,direction="both")
y.rst=rstandard(lm.step)
y.fit=predict(lm.step)
plot(y.rst~y.fit)
#缁樺埗妯″瀷璇婃柇鍥?
tlm<-lm(dailyNum ~  XJ,data=data)
par(mfrow=c(2,2))
plot(lm.step)
influence.measures(lm.step)
crPlots(tlm)
qqPlot(tlm)
vif(tlm)
